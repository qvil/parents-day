{"version":3,"sources":["styles/mixin.js","Home.js","Carnation.js","styles/GlobalStyle.js","App.js","serviceWorker.js","index.js"],"names":["CardStyle","css","_templateObject","RaisedCardStyle","_templateObject2","Container","styled","div","Home_templateObject","CardForm","form","Home_templateObject2","Input","input","_templateObject3","Button","Link","_templateObject4","Home","_useState","useState","parentName","myName","message","_useState2","Object","slicedToArray","state","setState","handleChange","name","event","objectSpread","defineProperty","target","value","handleSubmit","console","log","react_default","a","createElement","onSubmit","type","placeholder","onChange","onClick","to","concat","Carnation","_ref","_ref$match$params","match","params","parent","child","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","App","Fragment","styles_GlobalStyle","react_router_dom","basename","process","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4wBAEO,IAAMA,EAAYC,YAAHC,KASTC,EAAkBF,YAAHG,25BCN5B,IAAMC,EAAYC,IAAOC,IAAVC,KAQTC,EAAWH,IAAOI,KAAVC,IAMVX,EAEEG,GAIAS,EAAQN,IAAOO,MAAVC,KAWLC,EAAST,YAAOU,IAAPV,CAAHW,KA2DGC,MA9Cf,WAAgB,IAAAC,EACYC,mBAAS,CACjCC,WAAY,GACZC,OAAQ,GACRC,QAAS,KAJGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAN,EAAA,GACPQ,EADOH,EAAA,GACAI,EADAJ,EAAA,GAORK,EAAe,SAAAC,GAAI,OAAI,SAAAC,GAC3BH,EAASH,OAAAO,EAAA,EAAAP,CAAA,GAAKE,EAANF,OAAAQ,EAAA,EAAAR,CAAA,GAAcK,EAAOC,EAAMG,OAAOC,WAGtCC,EAAe,SAAAL,GACnBM,QAAQC,IAAI,qBAAsBP,IAIpC,OACEQ,EAAAC,EAAAC,cAACpC,EAAD,KACEkC,EAAAC,EAAAC,cAAChC,EAAD,CAAUiC,SAAUN,GAClBG,EAAAC,EAAAC,cAAA,qGACAF,EAAAC,EAAAC,cAAC7B,EAAD,CACE+B,KAAK,OACLC,YAAY,kCACZC,SAAUhB,EAAa,gBAEzBU,EAAAC,EAAAC,cAAC7B,EAAD,CACE+B,KAAK,OACLC,YAAY,sBACZC,SAAUhB,EAAa,YAEzBU,EAAAC,EAAAC,cAAC7B,EAAD,CACE+B,KAAK,OACLC,YAAY,2GACZC,SAAUhB,EAAa,aAEzBU,EAAAC,EAAAC,cAAC1B,EAAD,CACE+B,QAASV,EACTW,GAAE,GAAAC,OAAKrB,EAAMN,WAAX,KAAA2B,OAAyBrB,EAAML,SAFnC,yBC1EO2B,EARG,SAAAC,GAIZ,IAAAC,EAAAD,EAHJE,MACEC,OAAUC,EAERH,EAFQG,OAAQC,EAEhBJ,EAFgBI,MAGpB,OAAOhB,EAAAC,EAAAC,cAAA,sBAAAO,OAAiBM,EAAjB,aAAAN,OAAmCO,2MCL5C,IAYeC,EAZKC,YAAHC,KCgBFC,MAZf,WACE,OACEpB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoB,SAAA,KACErB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAQC,SAAUC,gBAChBzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlD,IACjCqB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,KAAK,kBAAkBE,UAAWnB,OCA7BoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCbNqB,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.60d559a7.chunk.js","sourcesContent":["import { css } from \"styled-components\";\r\n\r\nexport const CardStyle = css`\r\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),\r\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.11);\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  padding: 16px;\r\n  max-width: 24rem;\r\n`;\r\n\r\nexport const RaisedCardStyle = css`\r\n  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n    0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\r\n  border-radius: 4px;\r\n  padding: 16px;\r\n  max-width: 24rem;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { CardStyle, RaisedCardStyle } from \"./styles/mixin\";\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 8px;\r\n`;\r\n\r\nconst CardForm = styled.form`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: skyblue;\r\n  max-width: 800px;\r\n  ${CardStyle};\r\n  &:hover {\r\n    ${RaisedCardStyle};\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  outline: none;\r\n  border: none;\r\n  padding: 8px;\r\n  border-bottom: 1px solid rgba(52, 152, 219, 1);\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  margin-top: 8px;\r\n`;\r\n\r\n// const Button = styled.button`\r\nconst Button = styled(Link)`\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  margin-top: 16px;\r\n  color: white;\r\n  background: rgba(52, 152, 219, 1);\r\n  text-decoration: none;\r\n  text-align: center;\r\n  &:hover {\r\n    background: rgba(52, 152, 219, 0.8);\r\n  }\r\n`;\r\n\r\nfunction Home() {\r\n  const [state, setState] = useState({\r\n    parentName: \"\",\r\n    myName: \"\",\r\n    message: \"\"\r\n  });\r\n\r\n  const handleChange = name => event => {\r\n    setState({ ...state, [name]: event.target.value });\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    console.log(\"TCL: Home -> event\", event);\r\n    // event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CardForm onSubmit={handleSubmit}>\r\n        <h2>부모님께 카네이션을 선물하세요!</h2>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"부모님 성함\"\r\n          onChange={handleChange(\"parentName\")}\r\n        />\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"내 이름\"\r\n          onChange={handleChange(\"myName\")}\r\n        />\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"메시지(기본 : 부모님 은혜에 감사합니다.)\"\r\n          onChange={handleChange(\"message\")}\r\n        />\r\n        <Button\r\n          onClick={handleSubmit}\r\n          to={`${state.parentName}/${state.myName}`}\r\n        >\r\n          보내기\r\n        </Button>\r\n      </CardForm>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Carnation = ({\r\n  match: {\r\n    params: { parent, child }\r\n  }\r\n}) => {\r\n  return <div>{`parent: ${parent}, child: ${child}`}</div>;\r\n};\r\n\r\nexport default Carnation;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n html, body, #root {\r\n   margin: 0;\r\n   padding: 0;\r\n   height: 100%;\r\n }\r\n button {\r\n   outline: none;\r\n   border: none;\r\n }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Carnation from \"./Carnation\";\nimport GlobalStyle from \"./styles/GlobalStyle\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/:parent/:child\" component={Carnation} />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}