{"version":3,"sources":["styles/mixin.js","App.js","serviceWorker.js","index.js"],"names":["CardStyle","css","_templateObject","RaisedCardStyle","_templateObject2","GlobalStyle","createGlobalStyle","App_templateObject","Container","styled","div","App_templateObject2","Card","_templateObject3","Input","input","_templateObject4","Button","button","_templateObject5","App","_useState","useState","_useState2","Object","slicedToArray","state","setState","console","log","handleChange","name","event","objectSpread","defineProperty","target","value","react_default","a","createElement","Fragment","type","placeholder","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0vBAEO,IAAMA,EAAYC,YAAHC,KASTC,EAAkBF,YAAHG,ugCCP5B,IAAMC,EAAcC,YAAHC,KAYXC,EAAYC,IAAOC,IAAVC,KAOTC,EAAOH,IAAOC,IAAVG,IAMNb,EAEEG,GAIAW,EAAQL,IAAOM,MAAVC,KAULC,EAASR,IAAOS,OAAVC,KAkDGC,MAxCf,WAAe,IAAAC,EACaC,qBADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACCI,EADDJ,EAAA,GAEbK,QAAQC,IAAI,oBAAqBH,GAEjC,IAAMI,EAAe,SAAAC,GAAI,OAAI,SAAAC,GAC3BL,EAASH,OAAAS,EAAA,EAAAT,CAAA,GAAKE,EAANF,OAAAU,EAAA,EAAAV,CAAA,GAAcO,EAAOC,EAAMG,OAAOC,WAO5C,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAClC,EAAD,MACAgC,EAAAC,EAAAC,cAAC/B,EAAD,KACE6B,EAAAC,EAAAC,cAAC3B,EAAD,KACEyB,EAAAC,EAAAC,cAAA,qGACAF,EAAAC,EAAAC,cAACzB,EAAD,CACE2B,KAAK,OACLC,YAAY,kCACZC,SAAUb,EAAa,gBAEzBO,EAAAC,EAAAC,cAACzB,EAAD,CACE2B,KAAK,OACLC,YAAY,sBACZC,SAAUb,EAAa,YAEzBO,EAAAC,EAAAC,cAACzB,EAAD,CACE2B,KAAK,OACLC,YAAY,2GACZC,SAAUb,EAAa,aAEzBO,EAAAC,EAAAC,cAACtB,EAAD,CAAQ2B,QAzBI,WAClBhB,QAAQC,IAAIH,KAwBN,0BC5EUmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15032e05.chunk.js","sourcesContent":["import { css } from \"styled-components\";\r\n\r\nexport const CardStyle = css`\r\n  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.2),\r\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.11);\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  padding: 16px;\r\n  max-width: 24rem;\r\n`;\r\n\r\nexport const RaisedCardStyle = css`\r\n  box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n    0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);\r\n  border-radius: 4px;\r\n  padding: 16px;\r\n  max-width: 24rem;\r\n`;\r\n","import React, { useState } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { CardStyle, RaisedCardStyle } from \"./styles/mixin\";\n\nconst GlobalStyle = createGlobalStyle`\n html, body, #root {\n   margin: 0;\n   padding: 0;\n   height: 100%;\n }\n button {\n   outline: none;\n   border: none;\n }\n`;\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Card = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background: skyblue;\n  max-width: 800px;\n  ${CardStyle};\n  &:hover {\n    ${RaisedCardStyle};\n  }\n`;\n\nconst Input = styled.input`\n  outline: none;\n  border: none;\n  padding: 8px;\n  border-bottom: 1px solid rgba(52, 152, 219, 1);\n  width: 100%;\n  box-sizing: border-box;\n  margin-top: 8px;\n`;\n\nconst Button = styled.button`\n  padding: 8px;\n  margin-top: 16px;\n  color: white;\n  background: rgba(52, 152, 219, 1);\n  &:hover {\n    background: rgba(52, 152, 219, 0.8);\n  }\n`;\n\nfunction App() {\n  const [state, setState] = useState();\n  console.log(\"TCL: App -> state\", state);\n\n  const handleChange = name => event => {\n    setState({ ...state, [name]: event.target.value });\n  };\n\n  const handleClick = () => {\n    console.log(state);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        <Card>\n          <h2>부모님께 카네이션을 선물하세요!</h2>\n          <Input\n            type=\"text\"\n            placeholder=\"부모님 성함\"\n            onChange={handleChange(\"parentName\")}\n          />\n          <Input\n            type=\"text\"\n            placeholder=\"내 이름\"\n            onChange={handleChange(\"myName\")}\n          />\n          <Input\n            type=\"text\"\n            placeholder=\"메시지(기본 : 부모님 은혜에 감사합니다.)\"\n            onChange={handleChange(\"message\")}\n          />\n          <Button onClick={handleClick}>보내기</Button>\n        </Card>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}